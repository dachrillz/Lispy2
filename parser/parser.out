Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> LPAREN PLUS explist RPAREN
Rule 2     expression -> LPAREN MINUS explist RPAREN
Rule 3     expression -> LPAREN TIMES explist RPAREN
Rule 4     expression -> LPAREN DIVIDE explist RPAREN
Rule 5     explist -> expression
Rule 6     explist -> explist expression
Rule 7     expression -> NUMBER

Terminals, with rules where they appear

DIVIDE               : 4
LPAREN               : 1 2 3 4
MINUS                : 2
NUMBER               : 7
PLUS                 : 1
RPAREN               : 1 2 3 4
TIMES                : 3
error                : 

Nonterminals, with rules where they appear

explist              : 1 2 3 4 6
expression           : 5 6 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . LPAREN PLUS explist RPAREN
    (2) expression -> . LPAREN MINUS explist RPAREN
    (3) expression -> . LPAREN TIMES explist RPAREN
    (4) expression -> . LPAREN DIVIDE explist RPAREN
    (7) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .



state 2

    (1) expression -> LPAREN . PLUS explist RPAREN
    (2) expression -> LPAREN . MINUS explist RPAREN
    (3) expression -> LPAREN . TIMES explist RPAREN
    (4) expression -> LPAREN . DIVIDE explist RPAREN

    PLUS            shift and go to state 4
    MINUS           shift and go to state 5
    TIMES           shift and go to state 7
    DIVIDE          shift and go to state 6


state 3

    (7) expression -> NUMBER .

    RPAREN          reduce using rule 7 (expression -> NUMBER .)
    LPAREN          reduce using rule 7 (expression -> NUMBER .)
    NUMBER          reduce using rule 7 (expression -> NUMBER .)
    $end            reduce using rule 7 (expression -> NUMBER .)


state 4

    (1) expression -> LPAREN PLUS . explist RPAREN
    (5) explist -> . expression
    (6) explist -> . explist expression
    (1) expression -> . LPAREN PLUS explist RPAREN
    (2) expression -> . LPAREN MINUS explist RPAREN
    (3) expression -> . LPAREN TIMES explist RPAREN
    (4) expression -> . LPAREN DIVIDE explist RPAREN
    (7) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    explist                        shift and go to state 9
    expression                     shift and go to state 8

state 5

    (2) expression -> LPAREN MINUS . explist RPAREN
    (5) explist -> . expression
    (6) explist -> . explist expression
    (1) expression -> . LPAREN PLUS explist RPAREN
    (2) expression -> . LPAREN MINUS explist RPAREN
    (3) expression -> . LPAREN TIMES explist RPAREN
    (4) expression -> . LPAREN DIVIDE explist RPAREN
    (7) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    explist                        shift and go to state 10
    expression                     shift and go to state 8

state 6

    (4) expression -> LPAREN DIVIDE . explist RPAREN
    (5) explist -> . expression
    (6) explist -> . explist expression
    (1) expression -> . LPAREN PLUS explist RPAREN
    (2) expression -> . LPAREN MINUS explist RPAREN
    (3) expression -> . LPAREN TIMES explist RPAREN
    (4) expression -> . LPAREN DIVIDE explist RPAREN
    (7) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    explist                        shift and go to state 11
    expression                     shift and go to state 8

state 7

    (3) expression -> LPAREN TIMES . explist RPAREN
    (5) explist -> . expression
    (6) explist -> . explist expression
    (1) expression -> . LPAREN PLUS explist RPAREN
    (2) expression -> . LPAREN MINUS explist RPAREN
    (3) expression -> . LPAREN TIMES explist RPAREN
    (4) expression -> . LPAREN DIVIDE explist RPAREN
    (7) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    explist                        shift and go to state 12
    expression                     shift and go to state 8

state 8

    (5) explist -> expression .

    RPAREN          reduce using rule 5 (explist -> expression .)
    LPAREN          reduce using rule 5 (explist -> expression .)
    NUMBER          reduce using rule 5 (explist -> expression .)


state 9

    (1) expression -> LPAREN PLUS explist . RPAREN
    (6) explist -> explist . expression
    (1) expression -> . LPAREN PLUS explist RPAREN
    (2) expression -> . LPAREN MINUS explist RPAREN
    (3) expression -> . LPAREN TIMES explist RPAREN
    (4) expression -> . LPAREN DIVIDE explist RPAREN
    (7) expression -> . NUMBER

    RPAREN          shift and go to state 14
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 13

state 10

    (2) expression -> LPAREN MINUS explist . RPAREN
    (6) explist -> explist . expression
    (1) expression -> . LPAREN PLUS explist RPAREN
    (2) expression -> . LPAREN MINUS explist RPAREN
    (3) expression -> . LPAREN TIMES explist RPAREN
    (4) expression -> . LPAREN DIVIDE explist RPAREN
    (7) expression -> . NUMBER

    RPAREN          shift and go to state 15
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 13

state 11

    (4) expression -> LPAREN DIVIDE explist . RPAREN
    (6) explist -> explist . expression
    (1) expression -> . LPAREN PLUS explist RPAREN
    (2) expression -> . LPAREN MINUS explist RPAREN
    (3) expression -> . LPAREN TIMES explist RPAREN
    (4) expression -> . LPAREN DIVIDE explist RPAREN
    (7) expression -> . NUMBER

    RPAREN          shift and go to state 16
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 13

state 12

    (3) expression -> LPAREN TIMES explist . RPAREN
    (6) explist -> explist . expression
    (1) expression -> . LPAREN PLUS explist RPAREN
    (2) expression -> . LPAREN MINUS explist RPAREN
    (3) expression -> . LPAREN TIMES explist RPAREN
    (4) expression -> . LPAREN DIVIDE explist RPAREN
    (7) expression -> . NUMBER

    RPAREN          shift and go to state 17
    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 13

state 13

    (6) explist -> explist expression .

    RPAREN          reduce using rule 6 (explist -> explist expression .)
    LPAREN          reduce using rule 6 (explist -> explist expression .)
    NUMBER          reduce using rule 6 (explist -> explist expression .)


state 14

    (1) expression -> LPAREN PLUS explist RPAREN .

    RPAREN          reduce using rule 1 (expression -> LPAREN PLUS explist RPAREN .)
    LPAREN          reduce using rule 1 (expression -> LPAREN PLUS explist RPAREN .)
    NUMBER          reduce using rule 1 (expression -> LPAREN PLUS explist RPAREN .)
    $end            reduce using rule 1 (expression -> LPAREN PLUS explist RPAREN .)


state 15

    (2) expression -> LPAREN MINUS explist RPAREN .

    RPAREN          reduce using rule 2 (expression -> LPAREN MINUS explist RPAREN .)
    LPAREN          reduce using rule 2 (expression -> LPAREN MINUS explist RPAREN .)
    NUMBER          reduce using rule 2 (expression -> LPAREN MINUS explist RPAREN .)
    $end            reduce using rule 2 (expression -> LPAREN MINUS explist RPAREN .)


state 16

    (4) expression -> LPAREN DIVIDE explist RPAREN .

    RPAREN          reduce using rule 4 (expression -> LPAREN DIVIDE explist RPAREN .)
    LPAREN          reduce using rule 4 (expression -> LPAREN DIVIDE explist RPAREN .)
    NUMBER          reduce using rule 4 (expression -> LPAREN DIVIDE explist RPAREN .)
    $end            reduce using rule 4 (expression -> LPAREN DIVIDE explist RPAREN .)


state 17

    (3) expression -> LPAREN TIMES explist RPAREN .

    RPAREN          reduce using rule 3 (expression -> LPAREN TIMES explist RPAREN .)
    LPAREN          reduce using rule 3 (expression -> LPAREN TIMES explist RPAREN .)
    NUMBER          reduce using rule 3 (expression -> LPAREN TIMES explist RPAREN .)
    $end            reduce using rule 3 (expression -> LPAREN TIMES explist RPAREN .)

